Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

// instantiate an empty array for result
// break string into array for loop
// if character by itself, push character into array, if multiple, push count + character
// loop through and check how many times character is repeated
// turn my result array back into a string

function compressingStrings(input) {
  if (typeof(input) !== 'string') {
    return; undefined
  } else {
    let result = [];
    let compare = input.split("");
    let counter = 1;
    for (let i = 0; i < compare.length; i++) {a, a, a, b, etc.
      if (compare[i] === compare[i+1]) {0 + 1, 1 + 2, 2 + 3, 3 + 4, etc. 
        counter ++;2, 3, etc.
      } else if (counter === 1) {
        result.push(compare[i]);b, a
      } else {
        result.push(counter + compare[i]); 3a, 2c, 4d   
        counter = 1; reset counter
      }
    }
    return result.join(""); 3a, b, 2c, 4d, a -> "3ab2c4da"
  }
}